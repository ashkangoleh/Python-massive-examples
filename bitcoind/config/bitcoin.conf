##
## bitcoin.conf configuration file. Lines beginning with # are comments.
##
## ### Resources:
## https://bitcoin.stackexchange.com/questions/102803/what-are-the-maximum-useful-memory-limits-for-a-bitcoind-full-node
## https://github.com/bitcoin/bitcoin/blob/master/share/examples/bitcoin.conf
## https://jlopp.github.io/bitcoin-core-config-generator/#config=eyJfX2ludGVybmFsIjp7InBsYXRmb3JtIjoiTGludXgifSwiY29yZSI6eyJjb2luc3RhdHNpbmRleCI6MSwidHhpbmRleCI6MX0sIm5ldHdvcmsiOnsiYWRkbm9kZSI6Im1lcmN1cnkuYXJ6LnRlYW06MTAwODMiLCJsaXN0ZW4iOjAsIm9ubHluZXQiOiJpcHY0Iiwid2hpdGVsaXN0IjoibWVyY3VyeS5hcnoudGVhbSJ9LCJycGMiOnsiZGVwcmVjYXRlZHJwYyI6WyJhY2NvdW50cyIsImFkZHdpdG5lc3NhZGRyZXNzIiwic2lnbnJhd3RyYW5zYWN0aW9uIiwidmFsaWRhdGVhZGRyZXNzIl0sInNlcnZlciI6MSwicnBjdGhyZWFkcyI6MTI4LCJycGN3b3JrcXVldWUiOjUxMiwicnBjc2VydmVydGltZW91dCI6MzAwfX0=
## https://manpages.debian.org/unstable/bitcoind/bitcoind.1.en.html
##
## This config should be placed in following path:
## ~/.bitcoin/bitcoin.conf
##

########## [core] ##########
# Maintain coinstats index used by the gettxoutsetinfo RPC. (default: 0)
coinstatsindex=1
# Maintain a full transaction index, used by the getrawtransaction rpc call.
txindex=1
# location to store blockchain and other data.
datadir=/bitcoin/.bitcoin

# Set database cache size in megabytes; machines sync faster with a larger cache. Recommend setting as high as possible based upon machine's available RAM.
# dbcache is useful up until the point where you have the entire 
# UTXO in memory (4GB+ in 2021), and then increasing it further does not
# a lot other than increasing the time to shutdown the node safely
# (up to many minutes on a slow disk)
dbcache=8000

# Keep the transaction memory pool below <n> megabytes.
# maxmempool will increase performance by allowing more transactions
# (and their validity) to be ready for their inclusion in a block,
# but only up to the point where you are including all of the possible
# transactions that miners are likely to include.
maxmempool=300

# blockreconstructionextratxn will allow the node to store more transactions
# which are not in the mempool, but are still valid. This increases the efficiency
# of compact block transmission as sometimes transactions will be evicted from your
# mempool but may be in other people's. This setting notably is in number
# of transactions, not megabytes.
#blockreconstructionextratxn=

# Keep at most <n> unconnectable transactions in memory.
# maxorphantx increases transaction relay efficiency by keeping copies of transactions
# which could not be connected to a parent (and therefor can't be validated!), but might
# become valid in the future by the arrival of their parent. This setting is also in
# number of transactions, not megabytes.
maxorphantx=10

########## [network] ##########
# Add a node IP address to connect to and attempt to keep the connection open. This option can be set multiple times.
# addnode=mercury.arz.team:10083
# addnode=mars.arz.team:10083
# addnode=venus.arz.team:10083
# Alternatively use as many connect= settings as you like to connect ONLY to specific peers
#connect=69.164.218.197
#connect=10.0.0.1:8333

##############################################################
##            Quick Primer on addnode vs connect            ##
##  Let's say for instance you use addnode=4.2.2.4          ##
##  addnode will connect you to and tell you about the      ##
##    nodes connected to 4.2.2.4.  In addition it will tell ##
##    the other nodes connected to it that you exist so     ##
##    they can connect to you.                              ##
##  connect will not do the above when you 'connect' to it. ##
##    It will *only* connect you to 4.2.2.4 and no one else.##
##                                                          ##
##  So if you're behind a firewall, or have other problems  ##
##  finding nodes, add some using 'addnode'.                ##
##                                                          ##
##  If you want to stay private, use 'connect' to only      ##
##  connect to "trusted" nodes.                             ##
##                                                          ##
##  If you run multiple nodes on a LAN, there's no need for ##
##  all of them to open lots of connections.  Instead       ##
##  'connect' them all to one node that is port forwarded   ##
##  and has lots of connections.                            ##
##       Thanks goes to [Noodle] on Freenode.               ##
##############################################################

# Port on which to listen for connections (default: 8333, testnet: 18333, signet: 38333, regtest: 18444)
#port=
# Accept incoming connections from peers. enabled by default except when 'connect' is being used
listen=1
# Only connect to peers via IPV4
onlynet=ipv4
# Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Use [permissions]address for permissions. Uses same permissions as Whitelist Bound IP Address. Can be specified multiple times. Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool. Useful for a gateway node.
#mercury
whitelist=95.217.207.188
#mars
whitelist=157.90.215.22
#venus
whitelist=168.119.0.182

# Maximum number of inbound + outbound connections (default: 125). This option
# applies only if inbound connections are enabled; otherwise, the number of connections
# will not be more than 11: 8 full-relay connections, 2 block-relay-only ones, and
# occasionally 1 short-lived feeler or extra outbound block-relay-only connection.
# These limits do not apply to connections added manually with the -addnode
# configuration option or the addnode RPC, which have a separate limit of 8 connections.
maxconnections=40

# Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit.
# Maximum upload bandwidth target in MiB per day (e.g. 'maxuploadtarget=1024' is 1 GiB per day).
# This limits the upload bandwidth for those with bandwidth limits. 0 = no limit (default: 0).
# -maxuploadtarget does not apply to peers with 'download' permission.
# For more information on reducing bandwidth utilization, see: doc/reduce-traffic.md.
maxuploadtarget=5000

########## [rpc] ##########
# JSON-RPC options (for controlling a running Bitcoin/bitcoind process)
# Accept command line and JSON-RPC commands.
server=1
# Enable Accounts RPC,Enable Add Witness Address RPC,Enable Sign Raw Transaction RPC,Enable Validate Address RPC
deprecatedrpc=accounts
deprecatedrpc=addwitnessaddress
deprecatedrpc=signrawtransaction
deprecatedrpc=validateaddress
# Default Username and Password for JSON-RPC connections
# BitDB uses these values by default, but if you can change the settings
# By setting the config.json file in BitDB folder
rpcuser=bitcoin_rpc_user
rpcpassword=W31DEMtbKdbim
# Set the depth of the work queue to service RPC calls
rpcworkqueue=512
# Set the number of threads to service RPC calls
rpcthreads=128
# Number of seconds after which an uncompleted RPC call will time out
rpctimeout=300
# If you want to allow remote JSON-RPC access
# rpcallowip=0.0.0.0/0

# Bind to given address to listen for JSON-RPC connections.
# Refer to the manpage or bitcoind -help for further details.
#rpcbind=<addr>

# If no rpcpassword is set, rpc cookie auth is sought. The default `-rpccookiefile` name
# is .cookie and found in the `-datadir` being used for bitcoind. This option is typically used
# when the server and client are run as the same user.
#
# If not, you must set rpcuser and rpcpassword to secure the JSON-RPC API.
#
# The config option `rpcauth` can be added to server startup argument. It is set at initialization time
# using the output from the script in share/rpcauth/rpcauth.py after providing a username:
#
# ./share/rpcauth/rpcauth.py alice
# String to be appended to bitcoin.conf:
# rpcauth=alice:f7efda5c189b999524f151318c0c86$d5b51b3beffbc02b724e5d095828e0bc8b2456e9ac8757ae3211a5d9b16a22ae
# Your password:
# DONT_USE_THIS_YOU_WILL_GET_ROBBED_8ak1gI25KFTvjovL3gAM967mies3E=
#
# On client-side, you add the normal user/password pair to send commands:
#rpcuser=alice
#rpcpassword=DONT_USE_THIS_YOU_WILL_GET_ROBBED_8ak1gI25KFTvjovL3gAM967mies3E=
#
# You can even add multiple entries of these to the server conf file, and client can use any of them:
# rpcauth=bob:b2dd077cb54591a2f3139e69a897ac$4e71f08d48b4347cf8eff3815c0e25ae2e9a4340474079f55705f40574f4ec99

# How many seconds bitcoin will wait for a complete RPC HTTP request.
# after the HTTP connection is established.
#rpcclienttimeout=30

# By default, only RPC connections from localhost are allowed.
# Specify as many rpcallowip= settings as you like to allow connections from other hosts,
# either as a single IPv4/IPv6 or with a subnet specification.

# NOTE: opening up the RPC port to hosts outside your local trusted network is NOT RECOMMENDED,
# because the rpcpassword is transmitted over the network unencrypted.

# server=1 tells Bitcoin-Qt to accept JSON-RPC commands.
# it is also read by bitcoind to determine if RPC should be enabled
#rpcallowip=10.1.1.34/255.255.255.0
#rpcallowip=1.2.3.4/24
#rpcallowip=2001:db8:85a3:0:0:8a2e:370:7334/96

# Listen for RPC connections on this TCP port:
#rpcport=8332

# You can use Bitcoin or bitcoind to send commands to Bitcoin/bitcoind
# running on another host using this option:
#rpcconnect=127.0.0.1

########## [wallet] ##########
disablewallet=1

########## [ZeroMQ] ##########
# ZeroMQ messages power the realtime BitDB crawler
# so it's important to set the endpoint
#zmqpubhashtx=tcp://127.0.0.1:28332
#zmqpubhashblock=tcp://127.0.0.1:28332

########## [LOG] ##########
printtoconsole=0

########## [Sections] ##########
# Most options automatically apply to mainnet, testnet, and regtest networks.
# If you want to confine an option to just one network, you should add it in the relevant section.
# EXCEPTIONS: The options addnode, connect, port, bind, rpcport, rpcbind and wallet
# only apply to mainnet unless they appear in the appropriate section below.

# Options only for mainnet
[main]

# Options only for testnet
[test]

# Options only for signet
[signet]

# Options only for regtest
[regtest]